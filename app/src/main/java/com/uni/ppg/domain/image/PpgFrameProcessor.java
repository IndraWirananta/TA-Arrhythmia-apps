package com.uni.ppg.domain.image;

import android.util.Log;
import android.widget.TextView;

import androidx.annotation.NonNull;
import androidx.annotation.WorkerThread;

import com.otaliastudios.cameraview.frame.Frame;
import com.otaliastudios.cameraview.frame.FrameProcessor;
import com.otaliastudios.cameraview.size.Size;
import com.uni.ppg.domain.adapter.HeartRate;
import com.uni.ppg.domain.adapter.HeartRateAdapter;
import com.uni.ppg.domain.signalprocessing.pipeline.Pipeline;
import com.uni.ppg.domain.signalprocessing.pipeline.PpgProcessingPipeline;
import com.uni.ppg.domain.predict.Predict;

import java.lang.ref.WeakReference;
import java.util.Arrays;
import java.util.concurrent.CompletableFuture;
import java.util.stream.IntStream;
import java.util.stream.LongStream;

import static com.uni.ppg.constant.GlobalConstants.BATCH_SIZE;
import static com.uni.ppg.domain.image.PixelProcessor.yuvToRedSum;
import static com.uni.ppg.root.PpgApplication.executor;

public class PpgFrameProcessor implements FrameProcessor {

    /**
     * The number of frames collected for a single batch
     */
    private int frameCounter;

    /**
     * Y axis: the amount of color Red
     */
    private int[] signal;

    /**
     * X axis: current time in milliseconds when a frame is captured
     */
    private long[] time;

    /**
     * Reference to the UI element displaying heart rate
     */
    private WeakReference<TextView> viewWeakReferenceHeartRate;

    /**
     * Reference to the UI element displaying prediction
     */
    private static WeakReference<TextView> viewWeakReferencePrediction;

    public PpgFrameProcessor(WeakReference<TextView> viewWeakReferenceHeartRate, WeakReference<TextView> viewWeakReferencePrediction) {
        this.viewWeakReferenceHeartRate = viewWeakReferenceHeartRate;
        this.viewWeakReferencePrediction = viewWeakReferencePrediction;
        resetParameters();
    }



    @Override
    @WorkerThread
    // override "process" function from cameraview package
    public void process(@NonNull Frame frame) {
        Size size = frame.getSize();
//        Log.i( "Batch size achieved", String.valueOf(size.getWidth()) + String.valueOf(size.getHeight()));
        int redSum = yuvToRedSum(frame.getData(), size.getWidth(), size.getHeight());
        signal[frameCounter] = redSum; // append redSum to signal array
        time[frameCounter] = frame.getTime();// append frame time to time array

        if (++frameCounter == BATCH_SIZE) {
            Log.i( "Batch size achieved", " Batch size achieved" );
            calculateHeartRate();
            resetParameters();
        }
    }

    private void calculateHeartRate() {
        long startTime = time[0];
        int[] y = IntStream.of(signal).toArray();
//        int[] y = new int[]{392457797, 392331937, 391855451, 390946301, 389906007, 389353756, 389671705, 390144429, 390563262, 390879552, 391097204, 391302650, 391457793, 391610310, 391744268, 391809629, 391897913, 392030120, 392115885, 392091880, 391617250, 390746892, 389500769, 388716426, 388885204, 389415116, 389877800, 390252946, 390557766, 390789636, 391004496, 391188098, 391358668, 391509004, 391628674, 391714651, 391820315, 391681690, 391043336, 389450209, 388230508, 387594912, 387980047, 389086872, 390250081, 391078282, 391518869, 391738805, 391934451, 392080308, 392187026, 392265562, 392372294, 392487267, 392549981, 392265846, 391136093, 388810177, 387247291, 386337337, 387173065, 388825500, 390449374, 391312899, 392063018, 392542097, 392903342, 393153136, 392635314, 391947611, 391178866, 390839773, 390890955, 390553334, 388905874, 386185465, 384439568, 384299784, 385892797, 388089134, 389947170, 391121761, 391930828, 392492726, 392811688, 393075371, 392569230, 391983415, 391312924, 390906678, 390962904, 391073274, 390653769, 388696290, 385821751, 384049860, 384325946, 385962009, 388314814, 390350470, 391388541, 392120863, 392621775, 393015405, 392613519, 392147700, 391519214, 391150619, 391210897, 391387958, 391601021, 391672263, 390950287, 388399182, 386053899, 384814187, 385302279, 386990568, 389200530, 390684245, 391530892, 392239080, 392749192, 393155912, 392699449, 392126948, 391466012, 391144401, 391248090, 391386245, 391569405, 391701471, 391071390, 388745304, 386271275, 384953745, 385363731, 386937976, 388991603, 390346482, 391262644, 391969879, 392355189, 392677041, 392974343, 392539225, 392012072, 391243896, 390880755, 391040180, 391212093, 391100843, 390116475, 387277917, 385182234, 384074654, 384934502, 387142366, 389267412, 390652783, 391464320, 392047513, 392440821, 392740752, 392226552, 391707369, 391152434, 390905660, 391141723, 391421467, 391494849, 390635801, 387984321, 385645547, 384269561, 384609497, 385957361, 387817653, 389223196, 390230675, 390994745, 391460552, 391796764, 392079811, 392381545, 392677182, 392185980, 391715604, 391159318, 390967034, 390777225, 389240122, 386218717, 384196559, 383732605, 384961596, 386878007, 388716610, 389942756, 390826858, 391510479, 392071481, 392520272, 392843683, 392361925, 391853312, 391283479, 391007443, 391141266, 391472407, 391759705, 391564699, 389974418, 387081048, 385299235, 384255352, 385064354, 386751622, 388756346, 389963146, 390892248, 391613277, 392081861, 392432719, 392782928, 392382709, 392037462, 391604746, 391324655, 391169916, 391331615, 391601766, 391386914, 389856317, 386862643, 384937382, 383845722, 384780705, 386959572, 389071353, 391800324, 392454293, 392907887, 393232989, 392632660, 391960108, 391291659, 390975929, 391056068, 391300554, 391577124, 391723319, 391243350, 389390591, 386853260, 385310385, 385162814, 386263273, 388043966, 389650396, 390627021, 391390328, 391872014, 392231265, 392513625, 392781544, 392294801, 391877520, 391332157, 390874379, 390814467, 390829835, 390282675, 387708273, 384915935, 383384915, 384019731, 386101550, 388294459, 389774481, 390712991, 391475762, 391909035, 392233893, 392571398, 392919805, 392474645, 391981751, 391388865, 391074746, 390813980, 389653328, 386566489, 384358790, 383287217, 384401081, 386722332, 388932161, 390324941, 391199325, 391935191, 391732376, 390989071, 390640698, 390896220, 390949398, 389867468, 386757523, 384552102, 383368074, 384080061, 385967777, 388093920, 389619024, 390519297, 391239855, 391675014, 392024655, 392333993, 392646095, 392206690, 391855997, 391428922, 391103081, 390099232, 386835028, 384305104, 382939759, 383571946, 385429784, 387668376, 389205886, 390084735, 390837887, 391348747, 391769544, 392140183, 392476814, 391922024, 391405067, 391026815, 391249287, 391145072, 389560604, 386730071, 384764670, 383718336, 384548423, 386158282, 388152708, 389586795, 390538594, 391272928, 391650330, 391949967, 392273189, 392635522, 392129968, 391511572, 390885365, 390828302, 390809119, 389505590, 386645778, 384583530, 383542685, 384306133, 385932495, 387842906, 389250153, 390141240, 390622825, 390904551, 391238728, 391625368, 391978892, 392315493, 391798518, 391274082, 390621069, 390071703, 388262035, 385814075, 384452735, 384068155, 385333767, 386936993, 388560780, 389624160, 390251791, 390551256, 390902468, 391343226, 392506706, 392005626, 391535792, 390973270, 389703123, 386933516, 384839652, 391935191, 391732376, 390989071, 390640698, 390896220, 390949398, 389867468, 386757523, 384552102, 383368074, 384080061, 385967777, 388093920, 389619024, 390519297, 391239855, 391675014, 392024655, 392333993, 392646095, 392206690, 391855997, 391428922, 391103081, 390099232, 386835028, 384305104, 382939759, 383571946, 385429784, 387668376, 389205886, 390084735, 390837887, 391348747, 391769544, 392140183, 392476814, 391922024, 391405067, 391026815, 391249287, 391145072, 389560604, 386730071, 384764670, 383718336, 384548423, 386158282, 388152708, 389586795, 390538594, 391272928, 391650330, 391949967, 392273189, 392635522, 392129968, 391511572, 390885365, 390828302, 390809119, 389505590, 386645778, 384583530, 383542685, 384306133, 385932495, 387842906, 389250153, 390141240, 390622825, 390904551, 391238728, 391625368, 391978892, 392315493, 391798518, 391274082, 390621069, 390071703, 388262035, 385814075, 384452735, 384068155, 385333767, 386936993, 388560780, 389624160, 390251791, 390551256, 390902468, 391343226, 392506706, 392005626, 391535792, 390973270, 389703123, 386933516, 384839652};
//        int[] y = new int[]{339227856, 339807981, 340492473, 341143674, 340581524, 337798563, 333253431, 330253557, 329913550, 330596794, 332120450, 333912434, 335605276, 337016329, 337786034, 338119453, 337232822, 337444178, 337974727, 338210824, 338988803, 339799416, 340648478, 340947295, 338983162, 335389602, 331945693, 330185310, 331586765, 332841236, 334617406, 336652240, 338281180, 339347637, 338523441, 338652691, 339030856, 339104603, 339897691, 340733568, 341461542, 342406779, 343167183, 342307683, 339296669, 335054847, 332603623, 333186084, 334556111, 336165916, 337755820, 339365265, 340665309, 340037985, 339778733, 339827391, 340171615, 340697531, 341299605, 342114126, 342794575, 342747244, 340470711, 336088042, 332440565, 330425354, 331342921, 332348483, 333860919, 335509924, 336729102, 337364013, 337443421, 337460280, 337592444, 337774463, 338220958, 338963424, 339696617, 339101568, 339455147, 337964778, 330030523, 327848349, 328662546, 329679791, 330905537, 332785895, 334750842, 335714682, 336126927, 336416097, 336855954, 337469356, 338239576, 339085574, 339679003, 339804314, 338288228, 334344191, 330655428, 328505673, 329381549, 330859599, 332488604, 334166087, 335850580, 337035267, 337620925, 337897273, 338227443, 337770290, 338510955, 338782873, 339657611, 340349478, 339082489, 335754534, 329368315, 329983866, 330971014, 332167072, 333863902, 335612134, 336774119, 337352384, 337558978, 337733212, 338142278, 338605235, 337765179, 338065365, 338199585, 338717944, 338330493, 335562124, 330550944, 327095579, 326121173, 326729851, 327423800, 328463768, 329785016, 330957255, 331552319, 331530474, 331502142, 331879324, 332397079, 332956226}; // 333828593, 334919180, 336054608, 336590900, 334481226, 330683918, 327127290, 325025734, 324606660, 325617210, 326970331, 328555823, 330182082, 331290744, 331891311, 332444628, 332995860, 333752980, 334701188, 335730832, 336787019, 337845597, 338581594, 336965287, 332279431, 327870011, 326291975, 326287762, 327742624, 329030517, 330566443, 332183785, 333490588, 334215666, 334352275, 334631562, 335114343, 335776661, 336571332, 337482329, 338471124, 339312675, 337684493, 333852407, 328963087, 326152911, 325907906, 326624876, 327910893, 329359057, 330871989, 332229143, 332962733, 333150978, 333231442, 333699260, 334278513, 334812243, 335560148, 336354063, 337216849, 337196517, 334604038, 329137314, 326013793, 324172864, 324181625, 325023193, 326426131, 327981374, 329383736, 330167229, 330597203, 330751894, 331330237, 331931502, 332850877, 333899398, 335107962, 335886815, 334090666, 331268893, 328478899, 327357341, 328272065, 329772831, 331606520, 334066021, 336655324, 338783694, 340093175, 339673842, 340643299, 341334748, 342195288, 343121994, 344075541, 344996883, 343220060, 339246997, 335905591, 335729974, 337195715, 338572703, 339951266, 339815588, 340310120, 340169595, 340219324, 340407244, 340770054, 341269599, 341915078, 342605218, 343416591, 343105388, 340646587, 336956656, 334514745, 333928849, 335861540, 337346562, 338643854, 340250593, 340686518, 340722506, 340210442, 340001906, 340065459, 340302357, 340704572, 341108476, 340886516, 338325151, 333380732, 329884951, 328877832, 329168003, 329848983, 331224124, 332769596, 334133250, 334969934, 335206971, 335384383, 335799099, 336335976, 336885765, 337718387, 338728014, 339854805, 338927905, 335898689, 331054794, 327850350, 326934342, 327764488, 328779221, 329965964, 331483772, 333008049, 333780994, 334241229, 334744916, 335602773, 336534888, 337510978, 338488230, 339520768, 339241232, 339492924, 336562540, 331528234, 328468108, 327854378, 328491997, 329535763, 331195053, 333277880, 334980414, 335893813, 336249812, 336462470, 336658998, 336985354, 337333633, 337795276, 338387657, 339142872, 338299463, 336784321, 331672886, 327465274, 325779852, 325476507, 326585337, 327724910, 329107464, 330610403, 331720312, 332500501, 332598694, 332702318, 332693168, 332997463, 333657865, 334418605, 335262537, 335865305, 334566196, 331201424, 327052312, 324476638, 323371246, 324055817, 326863315, 328605259, 329953997, 330616198, 330980470, 331319952, 331688955, 332459965, 333353047, 334416832, 335581339, 336531928, 335510603, 332222197, 327975988, 325537018, 324720984, 325654084, 326895082, 328484087, 330340011, 331766882, 332653378, 333103668, 333358694, 333718087, 334377948, 335160881, 336020806, 336962550, 337725547, 336583784, 333187188, 327807139, 325828597, 324811772, 325878919, 327017647, 328414064, 330166092, 331762456, 332936791, 333606147, 334119115, 335682415, 336429211, 337188808, 338083663, 339071304, 339227894, 335707016, 330515720, 326476653, 325101701, 324941516, 326369457, 327875224, 329659744, 331338155, 332432294, 332647915, 332336481, 332061719, 332211260, 332911671, 333756610, 334574959, 335463166, 335645962, 333257963, 328640890, 324656369, 322505218, 322052581, 322984365, 324254369, 325725658, 327272802, 328320921, 328723187, 329269055, 330177497, 331278204, 332242118, 333448094, 334730755, 335895331, 336653022, 334688506, 330877062, 327456178, 325724343, 325839515, 326989939, 328348066, 330132189, 331913829, 333151374, 333694489, 334188647, 334549987, 335087213, 335777127, 336677772, 337543614, 338507733, 338966944, 336174046, 331309089, 327844949, 326473164, 326680788, 329555843, 331368631, 334541542, 335201251, 335341194, 335550507, 336014066, 336582170, 337322317, 338258976, 336460961, 327362573, 326007439, 326212516, 327101211, 328675847, 330523881, 332016150, 333240966, 333430364, 333686416, 334144622, 334773612};
        long[] x = LongStream.of(time).map(t -> t - startTime).toArray();

        CompletableFuture.supplyAsync(() -> processSignal(y), executor())
                .thenApply(signal ->  toHeartRate(signal, y, x))
                .thenAccept(this::updateUIHeartRate);
    }

    private int[] processSignal(int[] unprocessedSignal) {
        // process signal with dedicated pipeline
        Pipeline pipeline = PpgProcessingPipeline.pipeline();
        return pipeline.execute(unprocessedSignal);
    }

    private String toHeartRate(int[] processedSignal, int[] unprocessedSignal, long[] timestamps) {
        HeartRate adapter = new HeartRateAdapter(processedSignal, timestamps);
        Log.i("test", " LENGTH : " +  processedSignal.length + " " + timestamps.length);
        predict(processedSignal, unprocessedSignal,timestamps);
        return adapter.convertToHeartRate();
    }


    private void predict(int[] processedSignal, int[] unprocessedSignal, long[] timestamps){
        Log.i( "test","Predict" + Arrays.toString(processedSignal));
        Predict predictResult = new Predict(processedSignal, unprocessedSignal ,timestamps);
        predictResult.predict();
    }

    private void updateUIHeartRate(String heartRate) {
        TextView textView = viewWeakReferenceHeartRate.get();
        textView.post(() -> textView.setText(heartRate));
    }

    public static void updateUIPredict(String prediction) {
        TextView textView = viewWeakReferencePrediction.get();
        textView.post(() -> textView.setText(prediction));
    }

    private void resetParameters() {
        frameCounter = 0;
        signal = new int[BATCH_SIZE];
        time = new long[BATCH_SIZE];
    }
}
